(function(window, document) {

'use strict';

var module = window['bucket'] = {};

/**
 * Request resource from server.
 *
 * @param {String} url - Resource url.
 * @param {Object} options - Options.
 * @param {Boolean} [options.async=false] - If true do async request.
 * @param {Number} [options.timeout=5000] - Request timeout in ms.
 * @param {Function} done - Callback.
 */
function getResource(url, options, done) {
    var xhr = new XMLHttpRequest();

    options = options || {};

    xhr.open('GET', url, !!options.async);

    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                done(null, xhr.responseText);
            } else {
                done(new Error('Bad response status'));
            }

            clearTimeout(this._timeout);
        }
    };

    xhr.onerror = function(err) {
        clearTimeout(this._timeout);
        done(err);
    };

    xhr._timeout = setTimeout(function() {
        if (xhr.readyState < 4)  {
            xhr.abort();
            done(new Error('XMLHttpRequest timeout'));
        }
    }, options.timeout || 5000);

    xhr.send();
}


var body, head;

/**
 * Get dom element by tag.
 *
 * @param {String} tag - Tag name.
 * @returns {HTMLElement}
 */
function getByTag(tag) {
    return document[tag] || document.getElementsByTagName(tag)[0];
}


/**
 * Inject script or styles to dom.
 *
 * @param {String} dataOrSrc - Script text or source url if options.src is true.
 * @param {Object} options - Options.
 * @param {Boolean} [options.defer=false] - Set defer for script.
 * @param {Boolean} [options.bottom=false] - Append script to body.
 * @param {Boolean} [options.css=false] - Resource is css file.
 * @param {Boolean} [fallback=false] - Fallback to standard loading
 */
function injectResource(dataOrSrc, options, fallback) {
    options = options || {};

    var elem;

    if (fallback) {
        if (options.css) {
            elem = document.createElement('link');
            elem.rel = 'stylesheet';
            elem.href = dataOrSrc;
        } else {
            elem = document.createElement('script');
            elem.src = dataOrSrc;
        }
    } else {
        if (options.css) {
            elem = document.createElement('style');

            if (elem.styleSheet) {
                // ie < 9
                elem.styleSheet.cssText = dataOrSrc;
            } else if ('textContent' in elem) {
                // modern
                elem.textContent = dataOrSrc;
            } else {
                // another
                elem.appendChild(document.createTextNode(dataOrSrc));
            }
        } else {
            elem = document.createElement('script');
            elem.defer = !!options.defer;
            elem.text = dataOrSrc;
        }
    }

    if (options.bottom) {
        (body || (body = getByTag('body'))).appendChild(elem);
    } else {
        (head || (head = getByTag('head'))).appendChild(elem);
    }
}


/**
 * Load and cache static bundle.
 *
 * @param {String} resource - Static resource url.
 * @param {Object} options - Options.
 * @param {String} [options.key=resource] - Unique key.
 * @param {String} [options.version=null] - Unique tag for invalidate cache.
 * @param {Number} [options.expire=0] - Expiration time in ms if 0 than infinity.
 * @param {Number} [options.timeout=5000] - Request timeout in ms.
 * @param {Boolean} [options.async=false] - Load resource async.
 * @param {Boolean} [options.defer=false] - Add defer to script.
 * @param {Boolean} [options.bottom=false] - Append script to body.
 * @param {Boolean} [options.noCache=false] - Skip cache.
 * @param {Function} done - Callback.
 */
module.require = function require(resource, options, done) {
    options = options || {};

    var now = +(new Date());
    var key = options.key || resource;
    var version = options.version || null;  //TODO: get version from resource

    var item = getItem(key);
    var injectOptions = { defer: options.defer, css: /.css$|.css\?/.test(resource), bottom: options.bottom };

    if (!options.noCache && item && item.version === version &&
        (item.expire === 0 || item.expire + item.timestamp > now)) {

        injectResource(item.data, injectOptions);
        done && done(null);

    } else {
        removeItem(key);
        getResource(resource, { async: options.async, timeout: options.timeout }, function(err, res) {
            if (!err) {
                if (!options.noCache)
                    setItem(key, { timestamp: now, expire: options.expire || 0, version: version, data: res });

                injectResource(res, injectOptions);
                done && done(null);
            } else {
                injectResource(resource, injectOptions, true);
                done && done(err);
            }
        });
    }
};

var ls = null;

try {
    ls = window.localStorage;
} catch(e) {
    // Chrome throws exception if cookie is disabled
}

/**
 * Safe set data to local storage
 * @param {String} key
 * @param {Object} data
 * @returns {boolean}
 */
function setItem(key, data) {
    data = JSON.stringify(data);

    try {
        ls.setItem(key, data);

        return true;
    } catch (e) {
        // iPad workaround
        if (removeItem(key)) {
            try {
                ls.setItem(key, data);

                return true;
            } catch(e) {
            }
        }
        // throw exceptions frequently
    }

    return false;
}

/**
 * Safe get data from local storage
 *
 * @param {String} key
 * @returns {Object}
 */
function getItem(key) {
    try {
        return JSON.parse(ls.getItem(key));
    } catch (e) {
        // throw exceptions frequently
    }

    return null;
}

/**
 * Safe remove data from local storage.
 *
 * @param {String} key
 * @returns {Boolean}
 */
function removeItem(key) {
    try {
        ls.removeItem(key);
        return true;
    } catch(e) {
        // throw exceptions frequently
    }

    return false;
}


})(this, document);
